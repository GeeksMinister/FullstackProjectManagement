@page "/MySimonGame"

<PageTitle>Simon</PageTitle>

<div class="row">
    <h2 class="text-primary p-3 fw-bold ">Simon</h2>
    <h3 class="text-warning text-end p-3 text-center  @(Started ? "visible" : "invisible")">Game's On</h3>
</div>
<br />
<div class="form-check">

    <div class="row mb-5 w-100 justify-content-evenly">

        <div class="col-sm-auto col-lg-2 m-2 ">
            <button class="w-100  p-5 btn btn-danger fw-bold red shadow-lg @(IsLit[(int)Button.Red] ? "lit" : "")"
                    @onclick="() => { TryPress(Button.Red); }">
                1
            </button>
        </div>
        <div class="col-sm-auto col-lg-2 m-2 ">
            <button class="w-100 p-5 btn btn-success fw-bold green shadow-lg @(IsLit[(int)Button.Green] ? "lit" : "")"
                    @onclick="() => { TryPress(Button.Green); }">
                2
            </button>
        </div>
        <div class="col-sm-auto col-lg-2 m-2 ">
            <button class="w-100 p-5 btn btn-primary fw-bold blue shadow-lg @(IsLit[(int)Button.Blue] ? "lit" : "")"
                    @onclick="() => { TryPress(Button.Blue); }">
                3
            </button>
        </div>
        <div class="col-sm-auto col-lg-2 m-2 ">
            <button class="w-100 p-5 btn btn-warning fw-bold text-light yellow shadow-lg @(IsLit[(int)Button.Yellow] ? "lit" : "")"
                    @onclick="() => { TryPress(Button.Yellow); }">
                4
            </button>
        </div>
    </div>
</div>
<br />
<br />

<div class="container">
    <div class="row justify-content-center p-5">
        <button class="col-sm-auto col-lg-4 p-3 m-2 btn btn-dark btn-outline-light shadow-lg rounded-pill border-dark border-3"
                @onclick="StartNewGame">
            Start New Game
        </button>
    </div>

    <br />
    <div class="row text-center @(GameOver ? "visible" : "invisible")">
        <strong class="text-danger h5 ">
            •&nbsp; Game Over &nbsp;• <br /><br />
            Press "Start New Game" to play again.
        </strong>
    </div>
    <br />
    <div class="row m-3  w-auto">
        <strong class="text-success h5 "> High Score: @HighScore</strong>
    </div>
</div>

<style>
    .red.lit {
        background-color: hsl(0, 13%, 71%);
        border: 1px solid #7c5252;
    }

    .green.lit {
        background-color: hsl(128, 88%, 82%);
        border: 1px solid #7c5252;
    }

    .blue.lit {
        background-color: hsl(212, 78%, 75%);
        border: 1px solid #7c5252;
    }

    .yellow.lit {
        background-color: hsl(50, 36%, 83%);
        border: 1px solid #7c5252;
    }
</style>

@code
{
    Random random = new Random();
    List<Button> pattern = new List<Button>();
    bool[] IsLit = new bool[4];
    int Index;
    int HighScore;
    bool Busy;
    bool GameOver;
    double ButtonTime = 500; // milliseconds
    bool Started = false;

    void StartNewGame()
    {
        if (!Busy)
        {
            Started = true;
            GameOver = false;
            IsLit[(int)Button.Red] = false;
            IsLit[(int)Button.Green] = false;
            IsLit[(int)Button.Blue] = false;
            IsLit[(int)Button.Yellow] = false;
            Index = 0;
            Busy = false;
            pattern.Clear();
            pattern.Add((Button)random.Next(4));
            PlayPattern();
        }
    }

    void TryPress(Button button)
    {
        if (Busy || GameOver || !Started)
        {
            return;
        }
        Busy = true;
        IsLit[(int)button] = true;
        if (pattern[Index] != button)
        {
            GameOver = true;
            Started = false;
        }
        else
        {
            HighScore = Math.Max(Index + 1, HighScore);
        }
        Index++;
        System.Timers.Timer timer = new System.Timers.Timer();
        timer.Interval = ButtonTime;
        timer.Elapsed += (_, _) =>
        {
            Busy = false;
            IsLit[(int)button] = false;
            timer.Enabled = false;
            StateHasChanged();
            if (!GameOver && Index >= pattern.Count)
            {
                Index = 0;
                pattern.Add((Button)random.Next(4));
                PlayPattern();
            }
        };
        timer.Enabled = true;
        StateHasChanged();
    }

    void PlayPattern()
    {
        Busy = true;
        int index = 0;
        bool first = true;
        System.Timers.Timer timer = new System.Timers.Timer();
        timer.Interval = ButtonTime;
        timer.Elapsed += (_, _) =>
        {
            if (first)
            {
                IsLit[(int)pattern[index]] = true;
                StateHasChanged();
                first = false;
                return;
            }
            if (IsLit[(int)pattern[index]])
            {
                IsLit[(int)pattern[index]] = false;
                StateHasChanged();
                return;
            }
            index++;
            if (index >= pattern.Count)
            {
                timer.Enabled = false;
                Busy = false;
            }
            else
            {
                IsLit[(int)pattern[index]] = true;
            }
            StateHasChanged();
        };
        timer.Enabled = true;
        StateHasChanged();
    }

    enum Button
    {
        Red = 0,
        Green = 1,
        Blue = 2,
        Yellow = 3,
    }
}
