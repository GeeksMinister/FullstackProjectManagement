@page "/EmployeeTasks"
@inject IEmployeeClientData _data

<PageTitle>Tasks</PageTitle>

<AuthorizeView Roles="Employee, Admin, Manager">
    <Authorized>
        <h3>Registered Tasks for @context.User.FindFirst(ClaimTypes.Name)!.Value </h3>
        <div class="container-fluid p-3">
            @if (tasks is null)
            {
                <em class="h3">Loading ......</em>
            }
            else if (tasks?.Any() == false)
            {
                <p>No Task Was Found or Returned From Database</p>
            }
            else
            {
                <div class="row pt-4">
                    <h4 class="text-primary fw-light col-6">Tasks to do <span class="small">(@tasks?.Count)</span></h4>
                    <div class=" text-end">
                        <a href="AddTask" class="btn btn-success fw-bold">Add Task</a>
                    </div>
                </div>
                <br />
                <table class="table table-bordered table-striped">
                    <thead class="table-dark">
                        <tr class="border-5">
                            <th class="text-center">Task</th>
                            <th class="text-center">Description</th>
                            <th class="text-center">Priority</th>
                            <th class="text-center">Status</th>
                            <th class="text-center">Project</th>
                            <th class="text-center">Changes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var task in tasks!)
                        {
                            <tr class="border-5">
                                <td class="col-2 align-middle text-lg-center fw-bold">@task.TaskName</td>
                                <td class="col-4 text-sm-center align-middle">@task.Description</td>
                                <td class="col-1 text-sm-center align-middle">@task.Priority</td>
                                <td class="col-1 text-sm-center align-middle">@task.Status</td>
                                <td class="col-1 text-sm-center align-middle">@task.ProjectId</td>
                                <td class="col-1">
                                    <div class="text-center row w-75 m-auto">
                                        <a href="@($"/UpdateTask/{@task.Id}")" class="btn btn-warning p-1 mb-1">Update</a>
                                        <a href="@($"/DeleteTask/{@task.Id}")" class="btn btn-danger p-1 mt-1">Delete</a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </Authorized>

    <NotAuthorized>
        <h4>Please log-in to view your tasks</h4>
    </NotAuthorized>
</AuthorizeView>





@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }

    List<Todo>? tasks;
    public string Id = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState!;
        if (authState.User.Identity!.IsAuthenticated)
        {
            Id = authState.User.FindFirst(ClaimTypes.SerialNumber)!.Value;

            await LoadTasks();
        }
    }

    private async Task LoadTasks()
    {
        try
        {
            var result = await _data.GetEmployeeTasks(Id);
            if (result == null) return;
            tasks = result.ToList();
        }
        catch (Exception) { }
    }


}

